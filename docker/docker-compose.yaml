version: "3.0"
services:
  postgres:
    image: postgres:17
    container_name: pr_postgres
    networks:
      - pr_network
    environment:
      POSTGRES_USER: apppr
      POSTGRES_PASSWORD: pswpr
      POSTGRES_DB: people-registration
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data:rw
      - ./postgres/scripts:/docker-entrypoint-initdb.d:ro
  rabbit:
    image: rabbitmq:4.1-management
    container_name: pr_rabbitmq
    networks:
      - pr_network
    ports:
      - "5671:5671"
      - "15671:15671"
      - "15672:15672"
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq:rw
      - ./rabbitmq/definitions.json:/opt/definitions.json:ro
      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
      - ./rabbitmq/unsafe_root_ca.pem:/opt/cert/ca_certificate.pem:ro
      - ./rabbitmq/rabbitmq_dev.pem:/opt/cert/rabbitmq.pem:ro
      - ./rabbitmq/rabbitmq_privkey_dev.pem:/opt/cert/rabbitmq_privkey.pem:ro
      - ./rabbitmq/rabbitmq_management_dev.pem:/opt/cert/rabbitmq_management.pem:ro
      - ./rabbitmq/rabbitmq_management_privkey_dev.pem:/opt/cert/rabbitmq_management_privkey.pem:ro
  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: pr_mongodb
    networks:
      - pr_network
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb/data:/data/db:rw
      - ./mongodb/config:/data/config:ro
      - ./mongodb/unsafe_root_ca.pem:/opt/cert/ca_certificate.pem:ro
      - ./mongodb/mongodb_dev.pem:/opt/cert/mongodb_dev.pem:ro
  people-registration:
    image: people-registration-api:1.0-SNAPSHOT
    container_name: people-registration-api
    networks:
      - pr_network
    environment:
      MONGO_URL: mongodb://pr_mongodb:27017/people-registration
      POSTGRESQL_URL: jdbc:postgresql://pr_postgres:5432/people-registration
      POSTGRESQL_USER: apppr
      POSTGRESQL_PASSWORD: pswpr
      RABBIT_HOST: pr_rabbitmq
      RABBIT_PORT: 5672
      RABBIT_USER: guest
      RABBIT_PASSWORD: guest
      ZIPKIN_BASEURL: http://zipkin:9411/
    ports:
      - "8080:8080"
  zipkin:
    image: openzipkin/zipkin:3
    container_name: zipkin
    networks:
      - pr_network
    ports:
      - "9411:9411"
  prometheus:
    image: prom/prometheus:v3.4.0
    container_name: prometheus
    networks:
      - pr_network
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/data:/prometheus:rw
  loki_read:
    image: grafana/loki:latest
    container_name: loki_read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/config.yaml:ro
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki
  loki_write:
    image: grafana/loki:latest
    container_name: loki_write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/config.yaml:ro
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns
  minio:
    image: minio/minio
    container_name: minio
    command:
      - server /data --console-addess ":9001"
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data:rw
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/ds.yaml:/etc/grafana/provisioning/datasources/ds.yaml:ro
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  backend:
    image: grafana/loki:latest
    volumes:
      - ./grafana/loki-config.yaml:/etc/loki/config.yaml:ro
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - loki

  gateway:
    image: nginx:latest
    depends_on:
      - loki_read
      - loki_write
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

networks:
  pr_network:
    driver: bridge
  loki:
