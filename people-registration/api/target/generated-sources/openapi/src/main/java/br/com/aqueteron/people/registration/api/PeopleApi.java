/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.aqueteron.people.registration.api;

import br.com.aqueteron.people.registration.api.model.ErrorResponseApiSchema;
import br.com.aqueteron.people.registration.api.model.PeopleApiSchema;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "People", description = "People registration")
@RequestMapping("${openapi.peopleRegistration.base-path:/people-registration/api}")
public interface PeopleApi {

    /**
     * POST /v1/people : Criar cadastro
     * Cria um cadastro
     *
     * @param peopleApiSchema  (optional)
     * @return Sucesso em criar cadastro (status code 201)
     *         or Entrada inválida (status code 400)
     */
    @Operation(
        operationId = "createPeople",
        summary = "Criar cadastro",
        description = "Cria um cadastro",
        tags = { "People" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Sucesso em criar cadastro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PeopleApiSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "Entrada inválida", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseApiSchema.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/people",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<PeopleApiSchema> createPeople(
        @Parameter(name = "PeopleApiSchema", description = "") @Valid @RequestBody(required = false) PeopleApiSchema peopleApiSchema
    );


    /**
     * GET /v1/people/{peopleId} : Recuperar registro
     * Recupera um registro
     *
     * @param peopleId Identificador do registro (required)
     * @return Sucesso ao recuperar registro (status code 200)
     *         or Registro não encontrado (status code 404)
     */
    @Operation(
        operationId = "retrievePeople",
        summary = "Recuperar registro",
        description = "Recupera um registro",
        tags = { "People" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso ao recuperar registro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PeopleApiSchema.class))
            }),
            @ApiResponse(responseCode = "404", description = "Registro não encontrado", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseApiSchema.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/people/{peopleId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<PeopleApiSchema> retrievePeople(
        @Parameter(name = "peopleId", description = "Identificador do registro", required = true, in = ParameterIn.PATH) @PathVariable("peopleId") UUID peopleId
    );


    /**
     * GET /v1/people : Listar cadatros
     * Lista todos os cadastros
     *
     * @return Sucesso em recuperar registros (status code 200)
     *         or Erro em recuperar registros (status code 400)
     */
    @Operation(
        operationId = "searchPeople",
        summary = "Listar cadatros",
        description = "Lista todos os cadastros",
        tags = { "People" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso em recuperar registros", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PeopleApiSchema.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Erro em recuperar registros", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseApiSchema.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/people",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PeopleApiSchema>> searchPeople(
        
    );


    /**
     * PATCH /v1/people/{peopleId} : Editar registro
     * Edita o registro
     *
     * @param peopleId Identificador do registro (required)
     * @param peopleApiSchema  (optional)
     * @return Sucesso ao editar o registro (status code 200)
     *         or Erro ao atualizar registro (status code 400)
     *         or Registro não encontrado para editar (status code 404)
     */
    @Operation(
        operationId = "updatePeople",
        summary = "Editar registro",
        description = "Edita o registro",
        tags = { "People" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sucesso ao editar o registro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PeopleApiSchema.class))
            }),
            @ApiResponse(responseCode = "400", description = "Erro ao atualizar registro", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseApiSchema.class))
            }),
            @ApiResponse(responseCode = "404", description = "Registro não encontrado para editar", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseApiSchema.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/v1/people/{peopleId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<PeopleApiSchema> updatePeople(
        @Parameter(name = "peopleId", description = "Identificador do registro", required = true, in = ParameterIn.PATH) @PathVariable("peopleId") UUID peopleId,
        @Parameter(name = "PeopleApiSchema", description = "") @Valid @RequestBody(required = false) PeopleApiSchema peopleApiSchema
    );

}
